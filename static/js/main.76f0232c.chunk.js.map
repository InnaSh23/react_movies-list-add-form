{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","isValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","htmlFor","type","classNames","event","target","onBlur","prev","pattern","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isFormValid","setIsFormValid","correctImgUrl","test","correctimdbUrl","handleInputChange","setter","useEffect","onSubmit","preventDefault","cn","disabled","App","moviesFromServer","setMovies","newMovie","prewMovies","ReactDOM","render","document","getElementById"],"mappings":"iSAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,aAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACEC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAb,SAA2BD,EAAMK,aAIrC,sBAAKJ,UAAU,UAAf,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAf,0BA5BkC,ECE7BC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,OAFE,KAFsB,E,gBCSpC,IAAMC,EAA6B,SAAC,GAQpC,IAPLC,EAOI,EAPJA,KACAC,EAMI,EANJA,MAMI,IALJC,aAKI,MALIF,EAKJ,MAJJG,mBAII,sBAJmBD,GAInB,MAHJE,gBAGI,aAFJC,gBAEI,MAFO,WAAQ,EAEf,MADJC,eACI,SAEJ,EAAaC,oBAAS,2BAASP,EAAT,aAfdQ,KAAKC,SACVC,QAAQ,IACRC,MAAM,GAaa,IAAfC,EAAP,oBAGA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KACMC,EAAYF,GAAWT,IAAaH,EAAMe,SAC3CV,GAAWO,GAAWT,EAM3B,OACE,sBAAKjB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQ8B,QAASL,EAAlC,SACGV,IAGH,qBAAKf,UAAU,UAAf,SACE,uBACE+B,KAAK,OACLN,GAAIA,EACJ,0BAAkBZ,GAClBb,UAAWgC,IAAW,QAAS,CAC7B,YAAaJ,IAEfZ,YAAaA,EACbF,MAAOA,EACPI,SApBoB,SAACe,GAC3Bf,EAASe,EAAMC,OAAOpB,MACvB,EAmBOqB,OAAQ,kBAAMR,GAAW,SAACS,GAAD,OAAWA,CAAX,GAAjB,MAIXR,GACC,mBAAG5B,UAAU,iBAAb,mBAAkCe,EAAlC,oBAIP,EC5DKsB,EAAU,uKAMHC,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,EAA0BnB,mBAAS,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAA0BrB,mBAAS,IAAnC,mBAAOhB,EAAP,KAAcsC,EAAd,KACA,EAAsCtB,mBAAS,IAA/C,mBAAOf,EAAP,KAAoBsC,EAApB,KACA,EAA4BvB,mBAAS,IAArC,mBAAOlB,EAAP,KAAe0C,EAAf,KACA,EAA8BxB,mBAAS,IAAvC,mBAAOb,EAAP,KAAgBsC,EAAhB,KACA,EAA4BzB,mBAAS,IAArC,mBAAOT,EAAP,KAAemC,EAAf,KACA,EAAsC1B,oBAAS,GAA/C,mBAAO2B,EAAP,KAAoBC,EAApB,KAYMC,EAAgBZ,EAAQa,KAAKhD,GAC7BiD,EAAiBd,EAAQa,KAAK3C,GAE9BY,IACFf,GAASiC,EAAQa,KAAKhD,IAAWmC,EAAQa,KAAK3C,MAAcI,EAE1DyC,EAAoB,SACxBC,EAAsDvC,GAEtDuC,EAAOvC,GAEPkC,EAAeD,EAChB,EAuBD,OANAO,qBAAU,WACJd,EAAQ,IAvCZC,EAAS,GACTC,EAAS,IACTC,EAAe,IACfC,EAAU,IACVC,EAAW,IACXC,EAAU,IACVE,GAAe,GAoChB,GAAE,CAACR,IAGF,uBACExC,UAAU,WAEVuD,SAzBiB,SAACtB,GACpBA,EAAMuB,iBAUNjB,EARwB,CACtBnC,QACAC,cACAH,SACAK,UACAI,WAIF8B,EAASD,EAAQ,EAClB,EASC,UAKE,oBAAIxC,UAAU,QAAd,yBAEA,cAAC,EAAD,CACEa,KAAK,QACLE,MAAM,QACND,MAAOV,EACPc,SAAU,SAACJ,GAAD,OAAWsC,EAAkBV,EAAU5B,EAAvC,EACVG,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,cACLE,MAAM,cACND,MAAOT,EACPa,SAAU,SAACJ,GAAD,OAAWsC,EAAkBT,EAAgB7B,EAA7C,IAGZ,cAAC,EAAD,CACED,KAAK,SACLE,MAAM,YACND,MAAOZ,EACPgB,SAAU,SAACJ,GAAD,OAAWsC,EAAkBR,EAAW9B,EAAxC,EACVK,QAAS8B,EACThC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,UACLE,MAAM,WACND,MAAOP,EACPW,SAAU,SAACJ,GAAD,OAAWsC,EAAkBP,EAAY/B,EAAzC,EACVK,QAASgC,EACTlC,UAAQ,IAGV,cAAC,EAAD,CACEJ,KAAK,SACLE,MAAM,UACND,MAAOH,EACPO,SAAU,SAACJ,GAAD,OAAWsC,EAAkBN,EAAWhC,EAAxC,EACVG,UAAQ,IAGV,qBAAKjB,UAAU,mBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBACE+B,KAAK,SACL,UAAQ,gBACR/B,UAAWyD,IAAG,SAAU,UAAW,CACjC,eAAgBV,IAElBW,UAAWvC,EANb,uBAhDCqB,EA8DV,E,OC5HYmB,EAAM,WACjB,MAA4BvC,mBAAkBwC,GAA9C,mBAAOnD,EAAP,KAAeoD,EAAf,KAMA,OACE,sBAAK7D,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAEtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CACEuC,MAXU,SAACuB,GACjBD,GAAU,SAAAE,GAAU,4BAAQA,GAAR,CAAoBD,GAApB,GACrB,QAcF,ECtBDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,Q","file":"static/js/main.76f0232c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValid?: boolean,\n};\n\nfunction getRandomDigits() {\n  return +Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  isValid = true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = (touched && required && !value.trim())\n  || (!isValid && touched && required);\n\n  const handleTouchedChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleTouchedChange}\n          onBlur={() => setTouched((prev) => !prev)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\n// eslint-disable-next-line max-len\nconst pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\ntype Props = {\n  onAdd: (post: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const reset = () => {\n    setCount(0);\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setIsFormValid(false);\n  };\n\n  const correctImgUrl = pattern.test(imgUrl);\n  const correctimdbUrl = pattern.test(imdbUrl);\n\n  const isValid\n  = !!title && pattern.test(imgUrl) && pattern.test(imdbUrl) && !!imdbId;\n\n  const handleInputChange = (\n    setter: React.Dispatch<React.SetStateAction<string>>, value: string,\n  ) => {\n    setter(value);\n\n    setIsFormValid(isFormValid);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const newMovie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    onAdd(newMovie);\n    setCount(count + 1);\n  };\n\n  useEffect(() => {\n    if (count > 0) {\n      reset();\n    }\n  }, [count]);\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => handleInputChange(setTitle, value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value) => handleInputChange(setDescription, value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => handleInputChange(setImgUrl, value)}\n        isValid={correctImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => handleInputChange(setImdbUrl, value)}\n        isValid={correctimdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value) => handleInputChange(setImdbId, value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className={cn('button', 'is-link', {\n              'is-disabled': !isFormValid,\n            })}\n            disabled={!isValid}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovies = (newMovie: Movie) => {\n    setMovies(prewMovies => [...prewMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={addMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}